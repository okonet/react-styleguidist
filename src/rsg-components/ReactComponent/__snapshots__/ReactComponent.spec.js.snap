exports[`test renderer should render component 1`] = `
<div
  id="Foo-container">
  <header>
    <h2
      id="Foo">
      Foo
    </h2>
    <div>
      foo/bar.js
    </div>
    <div>
      <_class
        href="#!/Foo">
        Open isolated ⇢
      </_class>
    </div>
  </header>
  <div>
    Bar
  </div>
  <Playground
    code="<button>OK</button>"
    evalInContext={[Function]}
    index={0}
    name="Component" />
  <_class
    text="Hello *world*!" />
</div>
`;

exports[`test should not render props / methods section if there is no content 1`] = `
<div
  id="Test-container">
  <header>
    <h2
      id="Test">
      Test
    </h2>
    <div>
      test
    </div>
    <div>
      <_class
        href="#!/Test">
        Open isolated ⇢
      </_class>
    </div>
  </header>
  <div />
</div>
`;

exports[`test should render both props and methods section 1`] = `
<div
  id="Test-container">
  <header>
    <h2
      id="Test">
      Test
    </h2>
    <div>
      test
    </div>
    <div>
      <_class
        href="#!/Test">
        Open isolated ⇢
      </_class>
    </div>
  </header>
  <div />
  <div>
    <h3>
      Props
    </h3>
    <div>
      prop
    </div>
  </div>
  <div>
    <h3>
      Methods
    </h3>
    <div>
      method
    </div>
  </div>
</div>
`;

exports[`test should render component renderer 1`] = `
<_class
  description={
    <_class
      text="Bar" />
  }
  examples={
    <Examples
      examples={
        Array [
          Object {
            "content": "<button>OK</button>",
            "evalInContext": [Function],
            "type": "code",
          },
          Object {
            "content": "Hello *world*!",
            "type": "markdown",
          },
        ]
      }
      name="Foo" />
  }
  isolated={false}
  methods={false}
  name="Foo"
  pathLine="foo/bar.js" />
`;

exports[`test should render component renderer for component with methods 1`] = `
<_class
  description={
    <_class
      text="Bar" />
  }
  examples={
    <Examples
      examples={Array []}
      name="Foo" />
  }
  isolated={false}
  methods={
    <_class
      methods={
        Array [
          Object {
            "description": "Sets the counter to a particular value.",
            "name": "set",
            "params": Array [
              Object {
                "description": "New value for the counter.",
                "name": "newValue",
                "type": Object {
                  "name": "Number",
                },
              },
            ],
            "returns": null,
          },
        ]
      } />
  }
  name="Foo"
  pathLine="foo/bar.js" />
`;

exports[`test should render component renderer for component with props 1`] = `
<_class
  description={
    <_class
      text="Bar" />
  }
  examples={
    <Examples
      examples={Array []}
      name="Foo" />
  }
  isolated={false}
  methods={false}
  name="Foo"
  pathLine="foo/bar.js"
  props={
    <_class
      props={
        Object {
          "children": Object {
            "description": "Button label.",
            "required": true,
            "type": Object {
              "name": "string",
            },
          },
        }
      } />
  } />
`;

exports[`test should render methods section 1`] = `
<div
  id="Test-container">
  <header>
    <h2
      id="Test">
      Test
    </h2>
    <div>
      test
    </div>
    <div>
      <_class
        href="#!/Test">
        Open isolated ⇢
      </_class>
    </div>
  </header>
  <div />
  <div>
    <h3>
      Methods
    </h3>
    <div>
      test
    </div>
  </div>
</div>
`;

exports[`test should render props section 1`] = `
<div
  id="Test-container">
  <header>
    <h2
      id="Test">
      Test
    </h2>
    <div>
      test
    </div>
    <div>
      <_class
        href="#!/Test">
        Open isolated ⇢
      </_class>
    </div>
  </header>
  <div />
  <div>
    <h3>
      Props
    </h3>
    <div>
      test
    </div>
  </div>
</div>
`;
